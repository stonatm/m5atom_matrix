{"category":"analog","color":"#b1eb05","blocks":["__analog_init","__analog_offest","__analog_lm35","__analog_tmp36"],"jscode":"// Block __analog_init\nvar __analog_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"analog sensor init\"\n        }\n    ],\n    \"colour\": \"#b1eb05\"\n};\n\nwindow['Blockly'].Blocks['__analog_init'] = {\n    init: function() {\n        this.jsonInit(__analog_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__analog_init'] = function(block) {\n        return `class analog:\n\n  import machine\n\n  T_OFFEST = 0\n\n  def set_t_offest(offest):\n    analog.T_OFFEST = offest\n\n  def lm35_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = adc0.read() / 10\n    return temp + analog.T_OFFEST\n\n  def tmp36_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = (adc0.read()-500) / 10\n    return temp + analog.T_OFFEST\n` + \"\\n\";\n};\n\n// Block __analog_offest\nvar __analog_offest_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"set temp offest\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"offest\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"offest\"\n        }\n    ],\n    \"colour\": \"#b1eb05\"\n};\n\nwindow['Blockly'].Blocks['__analog_offest'] = {\n    init: function() {\n        this.jsonInit(__analog_offest_json);\n    }\n};\n\nwindow['Blockly'].Python['__analog_offest'] = function(block) {\n    var offest = Blockly.Python.valueToCode(block, 'offest', Blockly.Python.ORDER_NONE);\n    return `analog.set_t_offest( ${offest} )\n` + \"\\n\";\n};\n\n// Block __analog_lm35\nvar __analog_lm35_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"lm35 read\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"pin\"\n        }\n    ],\n    \"colour\": \"#b1eb05\"\n};\n\nwindow['Blockly'].Blocks['__analog_lm35'] = {\n    init: function() {\n        this.jsonInit(__analog_lm35_json);\n    }\n};\n\nwindow['Blockly'].Python['__analog_lm35'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\n    return [`analog.lm35_read( ${pin} )`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __analog_tmp36\nvar __analog_tmp36_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"read tmp36\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"pin\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"pin\"\n        }\n    ],\n    \"colour\": \"#b1eb05\"\n};\n\nwindow['Blockly'].Blocks['__analog_tmp36'] = {\n    init: function() {\n        this.jsonInit(__analog_tmp36_json);\n    }\n};\n\nwindow['Blockly'].Python['__analog_tmp36'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\n    return [`analog.tmp36_read( ${pin} )`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"init":["window['Blockly'].Python['__analog_init'] = function(block) {\n        return `class analog:\n\n  import machine\n\n  T_OFFEST = 0\n\n  def set_t_offest(offest):\n    analog.T_OFFEST = offest\n\n  def lm35_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = adc0.read() / 10\n    return temp + analog.T_OFFEST\n\n  def tmp36_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = (adc0.read()-500) / 10\n    return temp + analog.T_OFFEST\n` + \"\\n\";\n};\n\n","class analog:\n\n  import machine\n\n  T_OFFEST = 0\n\n  def set_t_offest(offest):\n    analog.T_OFFEST = offest\n\n  def lm35_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = adc0.read() / 10\n    return temp + analog.T_OFFEST\n\n  def tmp36_read(pin):\n    adc0 = machine.ADC(pin)\n    adc0.width(machine.ADC.WIDTH_9BIT)\n    adc0.atten(machine.ADC.ATTN_0DB)\n    temp = (adc0.read()-500) / 10\n    return temp + analog.T_OFFEST\n"],"offest":["window['Blockly'].Python['__analog_offest'] = function(block) {\n    var offest = Blockly.Python.valueToCode(block, 'offest', Blockly.Python.ORDER_NONE);\n    return `analog.set_t_offest( ${offest} )\n` + \"\\n\";\n};\n\n","analog.set_t_offest( ${offest} )\n"],"lm35":["window['Blockly'].Python['__analog_lm35'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\n    return [`analog.lm35_read( ${pin} )`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","analog.lm35_read( ${pin} )"],"tmp36":["window['Blockly'].Python['__analog_tmp36'] = function(block) {\n    var pin = Blockly.Python.valueToCode(block, 'pin', Blockly.Python.ORDER_NONE);\n    return [`analog.tmp36_read( ${pin} )`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","analog.tmp36_read( ${pin} )"]}}