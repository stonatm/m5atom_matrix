{"category":"matrix","color":"#bb73ff","blocks":["__matrix_init","__matrix_number","__matrix_colors"],"jscode":"// Block __matrix_init\nvar __matrix_init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"matrix init\"\n        }\n    ],\n    \"colour\": \"#bb73ff\"\n};\n\nwindow['Blockly'].Blocks['__matrix_init'] = {\n    init: function() {\n        this.jsonInit(__matrix_init_json);\n    }\n};\n\nwindow['Blockly'].Python['__matrix_init'] = function(block) {\n        return `\nclass matrix:\n  HEIGHT = 5\n  WIDTH = 5\n  LENGTH = (HEIGHT * WIDTH)\n\n  # 5x5 digits pixmaps\n  digits_left = [1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0]\n  digits_right = [0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1]\n  digits_center = [0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0]\n  # digits color\n  color_left = 0xFF0000\n  color_right = 0xFFFF00\n  color_center = 0x00FF00\n\n  def _get_digit(position, data):\n    start_pos = position * matrix.LENGTH\n    end_pos = start_pos + matrix.LENGTH\n    buffer = data[start_pos:end_pos]\n    return(buffer)\n\n  def _hsv(h, s=1, v=1):\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = int(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0: r, g, b = v, t, p\n    elif hi == 1: r, g, b = q, v, p\n    elif hi == 2: r, g, b = p, v, t\n    elif hi == 3: r, g, b = p, q, v\n    elif hi == 4: r, g, b = t, p, v\n    elif hi == 5: r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return (65536*r+256*g+b)\n\n  def set_number_colors(col_l, col_r,col_c):\n    matrix.color_left = matrix._hsv(col_l)\n    matrix.color_right = matrix._hsv(col_r)\n    matrix.color_center = matrix._hsv(col_c)\n\n  def draw_number(number):\n    # split number to digits\n    l_num = int(number/10)\n    r_num = number % 10\n    # create pixmap buffers\n    l_buf = [0]*25\n    r_buf = [0]*25\n    o_buf = [0]*25\n    # create pixmaps for digits\n    l_buf = matrix._get_digit(l_num, matrix.digits_left)\n    r_buf = matrix._get_digit(r_num, matrix.digits_right)\n    for i in range(0,25):\n      if l_buf[i]: o_buf[i] = matrix.color_left\n      if r_buf[i]: o_buf[i] = matrix.color_right\n      if l_buf[i] and r_buf[i]: o_buf[i] = matrix.color_center\n    # uiflow function\n    rgb.set_screen(o_buf)\n` + \"\\n\";\n};\n\n// Block __matrix_number\nvar __matrix_number_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"draw number\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"number\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"number\"\n        }\n    ],\n    \"colour\": \"#bb73ff\"\n};\n\nwindow['Blockly'].Blocks['__matrix_number'] = {\n    init: function() {\n        this.jsonInit(__matrix_number_json);\n    }\n};\n\nwindow['Blockly'].Python['__matrix_number'] = function(block) {\n    var number = Blockly.Python.valueToCode(block, 'number', Blockly.Python.ORDER_NONE);\n    return `matrix.draw_number( ${number} )\n` + \"\\n\";\n};\n\n// Block __matrix_colors\nvar __matrix_colors_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"set number colors\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"left\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"left\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"right\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"right\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"common\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"common\"\n        }\n    ],\n    \"colour\": \"#bb73ff\"\n};\n\nwindow['Blockly'].Blocks['__matrix_colors'] = {\n    init: function() {\n        this.jsonInit(__matrix_colors_json);\n    }\n};\n\nwindow['Blockly'].Python['__matrix_colors'] = function(block) {\n    var left = Blockly.Python.valueToCode(block, 'left', Blockly.Python.ORDER_NONE);\nvar right = Blockly.Python.valueToCode(block, 'right', Blockly.Python.ORDER_NONE);\nvar common = Blockly.Python.valueToCode(block, 'common', Blockly.Python.ORDER_NONE);\n    return `matrix.set_number_colors( ${left}, ${right}, ${common} )\n` + \"\\n\";\n};\n\n","code":{"init":["window['Blockly'].Python['__matrix_init'] = function(block) {\n        return `\nclass matrix:\n  HEIGHT = 5\n  WIDTH = 5\n  LENGTH = (HEIGHT * WIDTH)\n\n  # 5x5 digits pixmaps\n  digits_left = [1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0]\n  digits_right = [0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1]\n  digits_center = [0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0]\n  # digits color\n  color_left = 0xFF0000\n  color_right = 0xFFFF00\n  color_center = 0x00FF00\n\n  def _get_digit(position, data):\n    start_pos = position * matrix.LENGTH\n    end_pos = start_pos + matrix.LENGTH\n    buffer = data[start_pos:end_pos]\n    return(buffer)\n\n  def _hsv(h, s=1, v=1):\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = int(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0: r, g, b = v, t, p\n    elif hi == 1: r, g, b = q, v, p\n    elif hi == 2: r, g, b = p, v, t\n    elif hi == 3: r, g, b = p, q, v\n    elif hi == 4: r, g, b = t, p, v\n    elif hi == 5: r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return (65536*r+256*g+b)\n\n  def set_number_colors(col_l, col_r,col_c):\n    matrix.color_left = matrix._hsv(col_l)\n    matrix.color_right = matrix._hsv(col_r)\n    matrix.color_center = matrix._hsv(col_c)\n\n  def draw_number(number):\n    # split number to digits\n    l_num = int(number/10)\n    r_num = number % 10\n    # create pixmap buffers\n    l_buf = [0]*25\n    r_buf = [0]*25\n    o_buf = [0]*25\n    # create pixmaps for digits\n    l_buf = matrix._get_digit(l_num, matrix.digits_left)\n    r_buf = matrix._get_digit(r_num, matrix.digits_right)\n    for i in range(0,25):\n      if l_buf[i]: o_buf[i] = matrix.color_left\n      if r_buf[i]: o_buf[i] = matrix.color_right\n      if l_buf[i] and r_buf[i]: o_buf[i] = matrix.color_center\n    # uiflow function\n    rgb.set_screen(o_buf)\n` + \"\\n\";\n};\n\n","\nclass matrix:\n  HEIGHT = 5\n  WIDTH = 5\n  LENGTH = (HEIGHT * WIDTH)\n\n  # 5x5 digits pixmaps\n  digits_left = [1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0]\n  digits_right = [0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1]\n  digits_center = [0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0]\n  # digits color\n  color_left = 0xFF0000\n  color_right = 0xFFFF00\n  color_center = 0x00FF00\n\n  def _get_digit(position, data):\n    start_pos = position * matrix.LENGTH\n    end_pos = start_pos + matrix.LENGTH\n    buffer = data[start_pos:end_pos]\n    return(buffer)\n\n  def _hsv(h, s=1, v=1):\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    h60 = h / 60.0\n    h60f = int(h60)\n    hi = int(h60f) % 6\n    f = h60 - h60f\n    p = v * (1 - s)\n    q = v * (1 - f * s)\n    t = v * (1 - (1 - f) * s)\n    r, g, b = 0, 0, 0\n    if hi == 0: r, g, b = v, t, p\n    elif hi == 1: r, g, b = q, v, p\n    elif hi == 2: r, g, b = p, v, t\n    elif hi == 3: r, g, b = p, q, v\n    elif hi == 4: r, g, b = t, p, v\n    elif hi == 5: r, g, b = v, p, q\n    r, g, b = int(r * 255), int(g * 255), int(b * 255)\n    return (65536*r+256*g+b)\n\n  def set_number_colors(col_l, col_r,col_c):\n    matrix.color_left = matrix._hsv(col_l)\n    matrix.color_right = matrix._hsv(col_r)\n    matrix.color_center = matrix._hsv(col_c)\n\n  def draw_number(number):\n    # split number to digits\n    l_num = int(number/10)\n    r_num = number % 10\n    # create pixmap buffers\n    l_buf = [0]*25\n    r_buf = [0]*25\n    o_buf = [0]*25\n    # create pixmaps for digits\n    l_buf = matrix._get_digit(l_num, matrix.digits_left)\n    r_buf = matrix._get_digit(r_num, matrix.digits_right)\n    for i in range(0,25):\n      if l_buf[i]: o_buf[i] = matrix.color_left\n      if r_buf[i]: o_buf[i] = matrix.color_right\n      if l_buf[i] and r_buf[i]: o_buf[i] = matrix.color_center\n    # uiflow function\n    rgb.set_screen(o_buf)\n"],"number":["window['Blockly'].Python['__matrix_number'] = function(block) {\n    var number = Blockly.Python.valueToCode(block, 'number', Blockly.Python.ORDER_NONE);\n    return `matrix.draw_number( ${number} )\n` + \"\\n\";\n};\n\n","matrix.draw_number( ${number} )\n"],"colors":["window['Blockly'].Python['__matrix_colors'] = function(block) {\n    var left = Blockly.Python.valueToCode(block, 'left', Blockly.Python.ORDER_NONE);\nvar right = Blockly.Python.valueToCode(block, 'right', Blockly.Python.ORDER_NONE);\nvar common = Blockly.Python.valueToCode(block, 'common', Blockly.Python.ORDER_NONE);\n    return `matrix.set_number_colors( ${left}, ${right}, ${common} )\n` + \"\\n\";\n};\n\n","matrix.set_number_colors( ${left}, ${right}, ${common} )\n"]}}